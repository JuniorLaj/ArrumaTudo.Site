[{"E:\\LojaManutencao.Site\\src\\index.js":"1","E:\\LojaManutencao.Site\\src\\App.js":"2","E:\\LojaManutencao.Site\\src\\mock\\index.js":"3","E:\\LojaManutencao.Site\\src\\store\\index.js":"4","E:\\LojaManutencao.Site\\src\\mock\\clientesMock.js":"5","E:\\LojaManutencao.Site\\src\\mock\\serviçosMock.js":"6","E:\\LojaManutencao.Site\\src\\mock\\funcionariosMock.js":"7","E:\\LojaManutencao.Site\\src\\reducers\\index.js":"8","E:\\LojaManutencao.Site\\src\\utils\\mock.js":"9","E:\\LojaManutencao.Site\\src\\reducers\\selectedItemTable.js":"10","E:\\LojaManutencao.Site\\src\\utils\\axios.js":"11","E:\\LojaManutencao.Site\\src\\actions\\servicesActions.js":"12","E:\\LojaManutencao.Site\\src\\services\\AuthServices.js":"13","E:\\LojaManutencao.Site\\src\\routes\\guestRoute.js":"14","E:\\LojaManutencao.Site\\src\\pages\\Home\\index.js":"15","E:\\LojaManutencao.Site\\src\\pages\\Header\\index.js":"16","E:\\LojaManutencao.Site\\src\\actions\\accountActions.js":"17","E:\\LojaManutencao.Site\\src\\reducers\\accountReducer.js":"18","E:\\LojaManutencao.Site\\src\\pages\\index.js":"19","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Tabelas\\Serviços.js":"20","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Apresentação\\ApresentaEquipamento.js":"21","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Tabelas\\Clientes.js":"22","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Tabelas\\Funcionarios.js":"23","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Cadastro\\CadastrarFuncionário.js":"24","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Cadastro\\CadastrarServiço.js":"25","E:\\LojaManutencao.Site\\src\\utils\\apiCliente.js":"26","E:\\LojaManutencao.Site\\src\\utils\\apiEquipamento.js":"27","E:\\LojaManutencao.Site\\src\\utils\\apiFuncionario.js":"28","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Apresentação\\EditarCliente.js":"29","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Cadastro\\CadastrarCliente.js":"30","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Apresentação\\EditarFuncionario.js":"31","E:\\LojaManutencao.Site\\src\\pages\\HomeCliente\\index.js":"32","E:\\LojaManutencao.Site\\src\\pages\\HomeCliente\\FormFuncionario.js":"33"},{"size":300,"mtime":1616896524391,"results":"34","hashOfConfig":"35"},{"size":590,"mtime":1617847551890,"results":"36","hashOfConfig":"35"},{"size":104,"mtime":1616207408709,"results":"37","hashOfConfig":"35"},{"size":217,"mtime":1616207408711,"results":"38","hashOfConfig":"35"},{"size":434,"mtime":1617243909116,"results":"39","hashOfConfig":"35"},{"size":568,"mtime":1616207408709,"results":"40","hashOfConfig":"35"},{"size":683,"mtime":1616207408709,"results":"41","hashOfConfig":"35"},{"size":287,"mtime":1616971602867,"results":"42","hashOfConfig":"35"},{"size":166,"mtime":1616207408712,"results":"43","hashOfConfig":"35"},{"size":688,"mtime":1616207408710,"results":"44","hashOfConfig":"35"},{"size":91,"mtime":1616890198368,"results":"45","hashOfConfig":"35"},{"size":619,"mtime":1616207408708,"results":"46","hashOfConfig":"35"},{"size":812,"mtime":1617846748565,"results":"47","hashOfConfig":"35"},{"size":700,"mtime":1617847414803,"results":"48","hashOfConfig":"35"},{"size":3003,"mtime":1617549615563,"results":"49","hashOfConfig":"35"},{"size":2834,"mtime":1617498063273,"results":"50","hashOfConfig":"35"},{"size":980,"mtime":1617547457257,"results":"51","hashOfConfig":"35"},{"size":618,"mtime":1616971562217,"results":"52","hashOfConfig":"35"},{"size":238,"mtime":1617243231476,"results":"53","hashOfConfig":"35"},{"size":14360,"mtime":1617498353398,"results":"54","hashOfConfig":"35"},{"size":660,"mtime":1616207408704,"results":"55","hashOfConfig":"35"},{"size":5114,"mtime":1617548710764,"results":"56","hashOfConfig":"35"},{"size":5272,"mtime":1617550668689,"results":"57","hashOfConfig":"35"},{"size":7600,"mtime":1616207408705,"results":"58","hashOfConfig":"35"},{"size":7379,"mtime":1617498081988,"results":"59","hashOfConfig":"35"},{"size":143,"mtime":1617381978620,"results":"60","hashOfConfig":"35"},{"size":142,"mtime":1617382056418,"results":"61","hashOfConfig":"35"},{"size":145,"mtime":1617382051539,"results":"62","hashOfConfig":"35"},{"size":8204,"mtime":1617547270115,"results":"63","hashOfConfig":"35"},{"size":7785,"mtime":1617549398818,"results":"64","hashOfConfig":"35"},{"size":8062,"mtime":1617550224952,"results":"65","hashOfConfig":"35"},{"size":9433,"mtime":1617847474518,"results":"66","hashOfConfig":"35"},{"size":4706,"mtime":1617847266403,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1cw9ejd",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"E:\\LojaManutencao.Site\\src\\index.js",[],["142","143"],"E:\\LojaManutencao.Site\\src\\App.js",[],"E:\\LojaManutencao.Site\\src\\mock\\index.js",[],"E:\\LojaManutencao.Site\\src\\store\\index.js",[],"E:\\LojaManutencao.Site\\src\\mock\\clientesMock.js",[],"E:\\LojaManutencao.Site\\src\\mock\\serviçosMock.js",[],"E:\\LojaManutencao.Site\\src\\mock\\funcionariosMock.js",[],"E:\\LojaManutencao.Site\\src\\reducers\\index.js",[],"E:\\LojaManutencao.Site\\src\\utils\\mock.js",[],"E:\\LojaManutencao.Site\\src\\reducers\\selectedItemTable.js",[],"E:\\LojaManutencao.Site\\src\\utils\\axios.js",[],"E:\\LojaManutencao.Site\\src\\actions\\servicesActions.js",[],["144","145"],"E:\\LojaManutencao.Site\\src\\services\\AuthServices.js",[],"E:\\LojaManutencao.Site\\src\\routes\\guestRoute.js",["146","147"],"E:\\LojaManutencao.Site\\src\\pages\\Home\\index.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Header\\index.js",[],"E:\\LojaManutencao.Site\\src\\actions\\accountActions.js",[],"E:\\LojaManutencao.Site\\src\\reducers\\accountReducer.js",[],"E:\\LojaManutencao.Site\\src\\pages\\index.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Tabelas\\Serviços.js",["148"],"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from '../../../../utils/axios'\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport { Dialog, DialogTitle } from '@material-ui/core';\r\nimport CadastrarServiço from '../Cadastro/CadastrarServiço';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'id', numeric: false, disablePadding: true, label: 'Id_equipamento' },\r\n    { id: 'modelo', numeric: false, disablePadding: false, label: 'Modelo' },\r\n    { id: 'defeito', numeric: false, disablePadding: false, label: 'Defeito' },\r\n    { id: 'status', numeric: false, disablePadding: false, label: 'Status' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n    const [open, setOpen] = useState()\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Serviços\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Adicionar Equipamento\">\r\n                    <IconButton aria-label=\"Add\">\r\n                        <AddCircleOutline onClick={handleClickOpen} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n            <Dialog open={open} DialogContent={false} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"customized-dialog-title\">Adicionar Equipamento</DialogTitle>\r\n                <CadastrarServiço />\r\n            </Dialog>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nfunction Serviços() {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = useState('asc');\r\n    const [orderBy, setOrderBy] = useState('modelo');\r\n    const [selected, setSelected] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [dense, setDense] = useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [rows, setRows] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const getRows = useCallback(async () => {\r\n        await axios.get('/api/serviços/')\r\n            .then(response => {\r\n                // console.log(\"resposta aqui serviços: \", response)\r\n                setRows(response.data.serviços)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }, [setRows]\r\n    )\r\n\r\n    useEffect(() => {\r\n        getRows()\r\n\r\n    }, [getRows])\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, row) => {\r\n        const selectedIndex = selected.indexOf(row.id);\r\n        let newSelected = [];\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, row.id);\r\n            if (selected.length === 0) {\r\n                dispatch({ type: 'selecionarEquip', payload: row })\r\n            }\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n            dispatch({ type: 'selecionarEquip', payload: 0 })\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n            dispatch({ type: 'selecionarEquip', payload: 0 })\r\n        } else if (selectedIndex > 0) {\r\n            dispatch({ type: 'selecionarEquip', payload: 0 })\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.id);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.id}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.id}\r\n                                            </TableCell>\r\n                                            {/* <TableCell align=\"right\">{row.id}</TableCell> */}\r\n                                            <TableCell align=\"left\">{row.modelo}</TableCell>\r\n                                            <TableCell align=\"left\">{row.defeito}</TableCell>\r\n                                            <TableCell align=\"left\">{row.status}</TableCell>\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            {/* <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Serviços\r\n","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Apresentação\\ApresentaEquipamento.js",[],["149","150"],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Tabelas\\Clientes.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Tabelas\\Funcionarios.js",["151"],"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport apiFuncionario from '../../../../utils/apiFuncionario'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { Button, Dialog, DialogTitle,  } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport EditarFuncionario from '../Apresentação/EditarFuncionario';\r\nimport CadastrarFuncionario from '../Cadastro/CadastrarFuncionário'\r\n\r\nconst useStyles = makeStyles({\r\n    buttonAdd: {\r\n        Align: 'right'\r\n    },\r\n    table: {\r\n        width: '100%',\r\n    }\r\n})\r\n\r\nfunction Funcionarios() {\r\n    const classes = useStyles();\r\n    const [rows, setRows] = useState([])\r\n    const [openAddFuncionario,setOpenAddFuncionario] = useState()\r\n    const account = useSelector(state => state.account.user.data)\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = useState()\r\n    const handleClickOpen = (tab) => {\r\n        dispatch({ type: 'selecionarFuncionario', payload: tab })\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpenAddFuncionario(false)\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleAdicionarFuncionario = () => {\r\n        setOpenAddFuncionario(true)\r\n    };\r\n\r\n    const getRows = useCallback(async () => {\r\n        await apiFuncionario.get(`/funcionarios/${account.cpf_gerente}`)\r\n            .then(response => {\r\n                setRows(response.data)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }, [setRows])\r\n\r\n    useEffect(() => {\r\n        getRows()       \r\n\r\n    }, [getRows])\r\n\r\n\r\n    return(\r\n        <>\r\n        <div className={classes.buttonAdd}>\r\n        <Button onClick={handleAdicionarFuncionario} variant=\"contained\" color=\"secondary\">\r\n            Adicionar Funcionário\r\n        </Button>\r\n        </div>\r\n        <Dialog open={openAddFuncionario} DialogContent={false}\r\n            onClose={handleClose} aria-labelledby=\"form-dialog-addFuncionario\">\r\n            <DialogTitle id=\"customized-dialog-addFuncionario\">Adicionar Funcionário</DialogTitle>\r\n            <CadastrarFuncionario getRows = {()=>getRows()}/>\r\n        </Dialog>\r\n        <TableContainer >\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>CPF</TableCell>\r\n                        <TableCell>NOME</TableCell>\r\n                        <TableCell>ENDEREÇO</TableCell>\r\n                        <TableCell>TELEFONE</TableCell>\r\n                        <TableCell align= 'center'>DATA DE NASCIMENTO</TableCell>\r\n                        <TableCell align = 'center'>OPÇÕES</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                    rows.map((tab) => (\r\n                        <TableRow>\r\n                            {/* <tr> */}\r\n                            <TableCell>{tab.cpf}</TableCell>\r\n                            <TableCell>{tab.nome}</TableCell>\r\n                            <TableCell>{tab.endereco}</TableCell>\r\n                            <TableCell>{tab.telefone}</TableCell>\r\n                            <TableCell align='center'>\r\n                                {new Date(tab.data_nascimento).toLocaleDateString()}\r\n                            </TableCell>\r\n                            <TableCell align = 'center' >\r\n                                <Button onClick={() => handleClickOpen(tab)}>\r\n                                    <EditIcon  color='secondary'/>\r\n                                </Button>\r\n                                <Button onClick={async ()=>{\r\n                                    try{\r\n                                        await apiFuncionario.delete(`/deleteFuncionario/${tab.cpf}`)\r\n                                    }catch(error){\r\n                                        console.log(error)\r\n                                    }finally{\r\n                                        getRows()\r\n                                    }\r\n                                }}\r\n                                    >\r\n                                    <DeleteIcon color='primary'/>\r\n                                </Button>\r\n                            </TableCell>\r\n                            \r\n                            </TableRow>\r\n                    ))}\r\n                    <Dialog open={open} DialogContent={false}\r\n                        onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                        <DialogTitle id=\"customized-dialog-title\">Editar Funcionário</DialogTitle>\r\n                        <EditarFuncionario getRows = {()=>getRows()}/>\r\n                    </Dialog>\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Funcionarios\r\n","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Cadastro\\CadastrarFuncionário.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Cadastro\\CadastrarServiço.js",[],"E:\\LojaManutencao.Site\\src\\utils\\apiCliente.js",[],"E:\\LojaManutencao.Site\\src\\utils\\apiEquipamento.js",[],"E:\\LojaManutencao.Site\\src\\utils\\apiFuncionario.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Apresentação\\EditarCliente.js",["152"],"import React from 'react'\r\nimport { DialogContent, Box, Button,FormHelperText, TextField, Grid, makeStyles } from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup';\r\nimport { useSelector } from 'react-redux'\r\nimport {KeyboardDatePicker} from '@material-ui/pickers'\r\nimport apiCliente from '../../../../utils/apiCliente'\r\n// import { useNavigate } from 'react-router';\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        marginRight:'20vh',\r\n    },\r\n\r\n})\r\nfunction EditarCliente(props) {\r\n    const classes = useStyles()\r\n    const cliente = useSelector(state=> state.selectedItem.cliente)\r\n    console.log(cliente)\r\n    return (\r\n        <DialogContent>\r\n            <Grid>\r\n            <Box display=\"flex\" alignItems=\"center\" >\r\n                <Formik\r\n                    initialValues={{\r\n                        cpf: cliente.cpf,\r\n                        nome: cliente.nome.toString(),\r\n                        telefone: cliente.telefone.toString(),\r\n                        data_nascimento: new Date(cliente.data_nascimento).toLocaleDateString(),\r\n                        endereco: cliente.endereco.toString(),\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                        nome: Yup.string().max(255)\r\n                            .min(10, 'O nome precisa ter ao menos 10 caracteres')\r\n                            .required('Favor informar o nome completo'),\r\n                        telefone: Yup.string().max(11,'Telefone tem mais de 11 dígitos.')\r\n                            .required('Favor informar um Telefone. '),\r\n                        data_nascimento: Yup.string().required('Favor informar uma data de nascimento. '),\r\n                        endereco: Yup.string()\r\n                            .min(20, 'O endereço precisa ter ao menos 20 caracteres.')\r\n                            .max(255)\r\n                            .required('Favor informar o endereço completo'),\r\n                    })}\r\n                    onSubmit={async (\r\n                        values,\r\n                        { setErrors, setStatus, setSubmitting },\r\n                    ) => {\r\n                        try {\r\n                            await apiCliente.put(`/editarcliente`,{\r\n                                nome: values.nome,\r\n                                data_nascimento: values.data_nascimento,\r\n                                telefone: values.telefone,\r\n                                endereco: values.endereco,\r\n                                cpf: cliente.cpf\r\n                            })\r\n                            setStatus({ success: true });\r\n                            setSubmitting(true);\r\n                        } catch(error){\r\n                            const message =\r\n                            (error.response && error.response.data.message) ||\r\n                            'Alguma coisa aconteceu';\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: message });\r\n                            setSubmitting(false);\r\n                        }finally {\r\n                            props.getRows()\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\r\n                        <form noValidate  onSubmit={handleSubmit}>\r\n                             <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                disabled\r\n                                id=\"cpf\"\r\n                                label=\"CPF\"\r\n                                name=\"cpf\"\r\n                                autoComplete=\"cpf\"\r\n                                autoFocus\r\n                                defaultValue={cliente.cpf}\r\n                            />\r\n                            <div>\r\n\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                className={classes.textField}\r\n                                id=\"nome\"\r\n                                label=\"Nome completo\"\r\n                                name=\"nome\"\r\n                                autoComplete=\"nome\"\r\n                                autoFocus\r\n                                error={Boolean(errors.nome)}\r\n                                value={values.nome}\r\n                                onChange={handleChange}\r\n                                helperText={errors.nome}\r\n                            />\r\n                            {/* <div className={classes.space}/> */}\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                type='date'\r\n                                id=\"data_nascimento\"\r\n                                label=\"Data de Nascimento\"\r\n                                name=\"data_nascimento\"\r\n                                autoComplete=\"Data de Nascimento\"\r\n                                // format=\"dd/MM/yyyy\"\r\n                                autoFocus\r\n                                // defaultValue={new Date(cliente.data_nascimento)}\r\n                                error={Boolean(errors.data_nascimento)}\r\n                                value={values.data_nascimento}\r\n                                onChange={handleChange}\r\n                                helperText={errors.data_nascimento}\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                  }}\r\n                            />\r\n                            </div>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                id=\"telefone\"\r\n                                label=\"Telefone para contato\"\r\n                                name=\"telefone\"\r\n                                autoComplete=\"Telefone\"\r\n                                autoFocus\r\n                                error={Boolean(errors.telefone)}\r\n                                value={values.telefone}\r\n                                onChange={handleChange}\r\n                                helperText={errors.telefone}\r\n                            />\r\n                            \r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"endereco\"\r\n                                label=\"Endereço Completo\"\r\n                                name=\"endereco\"\r\n                                autoComplete=\"endereco\"\r\n                                autoFocus\r\n                                error={Boolean(errors.endereco)}\r\n                                value={values.endereco}\r\n                                onChange={handleChange}\r\n                                helperText={errors.endereco}\r\n                            />\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                // className={classes.button}\r\n                                type=\"submit\"\r\n                                disbled={isSubmitting}\r\n                            >\r\n                                Editar\r\n                            </Button>\r\n                            {errors.submit && (\r\n                                <FormHelperText error>{errors.submit}</FormHelperText>\r\n                            )}\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </Box>\r\n            </Grid>\r\n\r\n        </DialogContent>\r\n    )\r\n}\r\nexport default EditarCliente","E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Cadastro\\CadastrarCliente.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Components\\Apresentação\\EditarFuncionario.js",["153","154"],"import React from 'react'\r\nimport { DialogContent, Box, Button,FormHelperText, TextField, Grid, makeStyles } from '@material-ui/core'\r\nimport { Formik } from 'formik'\r\nimport * as Yup from 'yup';\r\nimport { useSelector } from 'react-redux'\r\nimport {KeyboardDatePicker} from '@material-ui/pickers'\r\nimport apiFuncionario from '../../../../utils/apiFuncionario'\r\n// import { useNavigate } from 'react-router';\r\nconst useStyles = makeStyles({\r\n    textField: {\r\n        marginRight:'20vh',\r\n    },\r\n\r\n})\r\nfunction EditarFuncionario(props) {\r\n    const classes = useStyles()\r\n    const Funcionario = useSelector(state=> state.selectedItem.Funcionario)\r\n    console.log(Funcionario)\r\n    return (\r\n        <DialogContent>\r\n            <Grid>\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mt={8}>\r\n                <Formik\r\n                    initialValues={{\r\n                        fullname: '',\r\n                        username: '',\r\n                        work: '',\r\n                        email: '',\r\n                        password: '',\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                        fullname: Yup.string().max(255)\r\n                            .min(10, 'O nome precisa ter ao menos 10 caracteres')\r\n                            .required('Favor informar o nome completo'),\r\n                        username: Yup.string().max(255)\r\n                            .required('Favor informar um UserName. '),\r\n                        work: Yup.string().max(255).required('Favor informar uma atividade. '),\r\n                        email: Yup.string()\r\n                            .email('Favor informar um email válido. ')\r\n                            .max(255)\r\n                            .required('Favor informar o email'),\r\n                        password: Yup.string()\r\n                            .max(255).min(7, 'O password precisa ter ao menos 7 caractéres. ')\r\n                            .required('Favor informar o password. '),\r\n                    })}\r\n                    onSubmit={async (\r\n                        values,\r\n                        { setErrors, setStatus, setSubmitting },\r\n                    ) => {\r\n                        try {\r\n                            // await dispatch(signUp(values.fullname, values.username, values.work, values.email, values.password));\r\n                            // navigate('/');\r\n                        } catch (error) {\r\n                            const message =\r\n                                (error.response && error.response.data.message) ||\r\n                                'Alguma coisa aconteceu';\r\n\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\r\n                        <form noValidate className={classes.form} onSubmit={handleSubmit}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"fullname\"\r\n                                label=\"fullname\"\r\n                                name=\"fullname\"\r\n                                autoComplete=\"fullname\"\r\n                                autoFocus\r\n                                error={Boolean(errors.fullname)}\r\n                                value={values.fullname}\r\n                                onChange={handleChange}\r\n                                helperText={errors.fullname}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"username\"\r\n                                label=\"UserName\"\r\n                                name=\"username\"\r\n                                autoComplete=\"username\"\r\n                                autoFocus\r\n                                error={Boolean(errors.username)}\r\n                                value={values.username}\r\n                                onChange={handleChange}\r\n                                helperText={errors.username}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"work\"\r\n                                label=\"Área de Trabalho\"\r\n                                name=\"work\"\r\n                                autoComplete=\"work\"\r\n                                autoFocus\r\n                                error={Boolean(errors.work)}\r\n                                value={values.work}\r\n                                onChange={handleChange}\r\n                                helperText={errors.work}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"E-mail\"\r\n                                name=\"email\"\r\n                                autoComplete=\"email\"\r\n                                autoFocus\r\n                                error={Boolean(errors.email)}\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                helperText={errors.email}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Senha\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                error={Boolean(errors.password)}\r\n                                helperText={errors.password}\r\n                            />\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                type=\"submit\"\r\n                                disbled={isSubmitting}\r\n                            >\r\n                                Editar\r\n                </Button>\r\n                            {errors.submit && (\r\n                                <FormHelperText error>{errors.submit}</FormHelperText>\r\n                            )}\r\n                            {/* <Grid container>\r\n                                <Grid item>\r\n                                    <Link>Esqueceu sua senha?</Link>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Link>Não tem uma conta? Registre-se</Link>\r\n                                </Grid>\r\n                            </Grid> */}\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n                {/* <Copyright /> */}\r\n            </Box>\r\n            </Grid>\r\n\r\n        </DialogContent>\r\n    )\r\n}\r\nexport default EditarFuncionario","E:\\LojaManutencao.Site\\src\\pages\\HomeCliente\\index.js",["155"],"import React, { useCallback, useState } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n// import { useNavigate } from 'react-router-dom';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n// import { useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport FormFuncionario from './FormFuncionario';\r\nimport { FaRocket } from 'react-icons/fa';\r\nimport apiEquip from '../../utils/apiEquipamento'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: '100vh',\r\n        flexDirection: 'row',\r\n        display: 'flex'\r\n    },\r\n\r\n    image: {\r\n        backgroundImage: 'url(/imgs/background.jpg)',\r\n        backgroundPosition: 'center',\r\n        backgroundSize: 'cover',\r\n        backgroundRepeat: 'none',\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n    },\r\n    avatar: {\r\n        background: theme.palette.primary.main,\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    form: {\r\n        margin: theme.spacing(2, 4),\r\n    },\r\n    loginFunc: {\r\n        right: '0'\r\n    },\r\n    pedidosClienteTexto: {\r\n        marginLeft: '5vh',\r\n    },\r\n    listaCliente: {\r\n        // display: 'flex',\r\n        // flexDirection: 'row'\r\n    }\r\n}));\r\n\r\n\r\n function HomeCliente(){\r\n    const classes = useStyles();\r\n    // const navigate = useNavigate();\r\n    // const dispatch = useDispatch();\r\n    const [equipsCliente,setEquipsCliente] = useState([])\r\n\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const getEquipsCliente = useCallback(async (cpf)=> {\r\n        await apiEquip.get(`/equipamento/cliente/${cpf}`)\r\n        .then(response => {\r\n            console.log(response.data)\r\n            setEquipsCliente(response.data)\r\n\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }, [setEquipsCliente])\r\n\r\n    // useEffect(() => {\r\n    //     getEquipsCliente()\r\n\r\n    // }, [getEquipsCliente])\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n      };\r\n    \r\n      const handleClose = () => {\r\n        setAnchorEl(null);\r\n      };\r\n    \r\n      const open = Boolean(anchorEl);\r\n      const id = open ? 'simple-popover' : undefined;\r\n\r\n    return(\r\n        <>\r\n        <Box>\r\n            <Box clasname ={classes.loginFunc}>\r\n                <Tooltip  title=\"Área do Funcionário\">\r\n                    <IconButton aria-label=\"Add\">\r\n                        {/* <FilterListIcon /> */}\r\n                        <ExitToAppIcon color='secondary' onClick={handleClick}  />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Popover\r\n                id={id}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={handleClose}\r\n                anchorOrigin={{\r\n                vertical: 'bottom',\r\n                horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'center',\r\n                }}\r\n                >\r\n                   <FormFuncionario />\r\n                </Popover>\r\n            </Box>\r\n            <center>\r\n                <h1> ARRUMA TUDO</h1>\r\n                <h2>A sua loja de manutenção! Resolvemos o problema do seu equipamento em um prazo máximo de 7 dias!</h2>\r\n            </center>\r\n            <center>\r\n\r\n                <img src=\"logo192.png\"/>\r\n                {/* <img src=\"logo192.png\"/>\r\n                <img src=\"logo192.png\"/>\r\n                <img src=\"logo192.png\"/>\r\n                <img src=\"logo192.png\"/>\r\n                <img src=\"logo192.png\"/> */}\r\n\r\n\r\n            </center>\r\n        </Box>\r\n        <Box className={classes.pedidosClienteTexto}>\r\n            <h2>\r\n            Para verificar o estado dos equipamentos que enviou para manutenção, digite aqui seu cpf ou o número do seu pedido.\r\n            </h2>\r\n        </Box>\r\n        <Box className={classes.root}>\r\n            <Box item md={5}>\r\n                <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" >\r\n                    <Avatar className={classes.avatar}>\r\n                        <FaRocket />\r\n                    </Avatar>\r\n                    <Typography variant=\"h5\">Acesso aos pedidos</Typography>\r\n                    <Formik\r\n                        initialValues={{\r\n                            cpf: '',\r\n\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                            cpf: Yup.string()\r\n                                .max(11)\r\n                                .required('Favor informar o cpf'),\r\n                        })}\r\n                        onSubmit={async (\r\n                            values,\r\n                            { setErrors, setStatus, setSubmitting },\r\n                        ) => {\r\n                            try {\r\n                                 await getEquipsCliente(values.cpf)\r\n                                 setStatus({ success: true });\r\n                                //  setErrors({ submit: message });\r\n                                 setSubmitting(true);\r\n                            } catch (error) {\r\n                                const message =\r\n                                    (error.response && error.response.data.message) ||\r\n                                    'Alguma coisa aconteceu';\r\n\r\n                                setStatus({ success: false });\r\n                                setErrors({ submit: message });\r\n                                setSubmitting(false);\r\n                            }\r\n                        }}\r\n                    >\r\n                        {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\r\n                            <form noValidate className={classes.form} onSubmit={handleSubmit}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"cpf\"\r\n                                    label=\"CPF\"\r\n                                    name=\"cpf\"\r\n                                    autoComplete=\"CPF\"\r\n                                    autoFocus\r\n                                    error={Boolean(errors.email)}\r\n                                    value={values.email}\r\n                                    onChange={handleChange}\r\n                                    helperText={errors.email}\r\n                                />\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    className={classes.button}\r\n                                    type=\"submit\"\r\n                                    disbled={isSubmitting}\r\n                                >\r\n                                    Procurar\r\n                </Button>\r\n                                {errors.submit && (\r\n                                    <FormHelperText error>{errors.submit}</FormHelperText>\r\n                                )}\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </Box>\r\n            </Box>\r\n\r\n                <table BORDER =\"1\" className={classes.listaCliente} >\r\n                {(\r\n                        \r\n                        equipsCliente.length===0 ?\r\n                    <tr>\r\n                        <th>Número pedido</th>\r\n\r\n                        <th>Tipo</th>\r\n\r\n                        <th>Data de Entrada</th>\r\n\r\n                        <th>Data de entrega (prevista)</th>\r\n\r\n                        <th>Status</th>\r\n                    </tr>\r\n                    :<></>\r\n                )}\r\n                    {/* <tr>\r\n                        <td>05424</td>\r\n                        <td>RTX 04541</td>\r\n                        <td>21/03</td>\r\n                        <td>28/03</td>\r\n                        <td>Em andamento</td>\r\n\r\n                    </tr> */}\r\n                    {\r\n                        \r\n                        equipsCliente.map((tab) => (\r\n                            <tr>\r\n                            <td>{tab.id_equipamento}</td>\r\n                            <td>{tab.tipo}</td>\r\n                            <td>{new Date(tab.data_entrada).toLocaleDateString()}</td>\r\n                            <td>{new Date(tab.data_entrega).toLocaleDateString()}</td>\r\n                            <td>{tab.status? 'Pronto':'Em andamento'}</td>\r\n                        </tr>\r\n                        ))\r\n                    }\r\n                </table>\r\n        </Box>\r\n            </>\r\n        )\r\n            \r\n}\r\n\r\nexport default HomeCliente","E:\\LojaManutencao.Site\\src\\pages\\HomeCliente\\FormFuncionario.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"156","replacedBy":"160"},{"ruleId":"158","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":4,"column":8,"nodeType":"164","messageId":"165","endLine":4,"endColumn":12},{"ruleId":"162","severity":1,"message":"166","line":10,"column":11,"nodeType":"164","messageId":"165","endLine":10,"endColumn":26},{"ruleId":"162","severity":1,"message":"167","line":214,"column":19,"nodeType":"164","messageId":"165","endLine":214,"endColumn":27},{"ruleId":"156","replacedBy":"168"},{"ruleId":"158","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":54,"column":8,"nodeType":"172","endLine":54,"endColumn":17,"suggestions":"173"},{"ruleId":"162","severity":1,"message":"174","line":6,"column":9,"nodeType":"164","messageId":"165","endLine":6,"endColumn":27},{"ruleId":"162","severity":1,"message":"174","line":6,"column":9,"nodeType":"164","messageId":"165","endLine":6,"endColumn":27},{"ruleId":"162","severity":1,"message":"175","line":7,"column":8,"nodeType":"164","messageId":"165","endLine":7,"endColumn":22},{"ruleId":"176","severity":1,"message":"177","line":127,"column":17,"nodeType":"178","endLine":127,"endColumn":41},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],["179"],["180"],"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'isAuthenticated' is assigned a value but never used.","'setDense' is assigned a value but never used.",["179"],["180"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'account.cpf_gerente'. Either include it or remove the dependency array.","ArrayExpression",["181"],"'KeyboardDatePicker' is defined but never used.","'apiFuncionario' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"182","fix":"183"},"Update the dependencies array to be: [account.cpf_gerente]",{"range":"184","text":"185"},[1948,1957],"[account.cpf_gerente]"]