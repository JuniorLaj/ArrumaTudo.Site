[{"/home/jose/Documentos/trab-bd/src/index.js":"1","/home/jose/Documentos/trab-bd/src/App.js":"2","/home/jose/Documentos/trab-bd/src/Home/index.js":"3","/home/jose/Documentos/trab-bd/src/utils/axios.js":"4","/home/jose/Documentos/trab-bd/src/mock/index.js":"5","/home/jose/Documentos/trab-bd/src/mock/funcionariosMock.js":"6","/home/jose/Documentos/trab-bd/src/mock/serviçosMock.js":"7","/home/jose/Documentos/trab-bd/src/utils/mock.js":"8","/home/jose/Documentos/trab-bd/src/Home/Services/Cadastro/CadastrarServiço.js":"9","/home/jose/Documentos/trab-bd/src/Home/Services/Cadastro/CadastrarFuncionário.js":"10","/home/jose/Documentos/trab-bd/src/actions/servicesActions.js":"11","/home/jose/Documentos/trab-bd/src/services/AuthServices.js":"12","/home/jose/Documentos/trab-bd/src/store/index.js":"13","/home/jose/Documentos/trab-bd/src/reducers/index.js":"14","/home/jose/Documentos/trab-bd/src/mock/clientesMock.js":"15","/home/jose/Documentos/trab-bd/src/Home/Services/index.js":"16","/home/jose/Documentos/trab-bd/src/Home/Services/Tabelas/Serviços.js":"17","/home/jose/Documentos/trab-bd/src/Home/Services/Tabelas/Funcionarios.js":"18","/home/jose/Documentos/trab-bd/src/Home/Services/Tabelas/Clientes.js":"19","/home/jose/Documentos/trab-bd/src/Home/Header/index.js":"20"},{"size":288,"mtime":1611703754628,"results":"21","hashOfConfig":"22"},{"size":248,"mtime":1615679048288,"results":"23","hashOfConfig":"22"},{"size":228,"mtime":1615681444651,"results":"24","hashOfConfig":"22"},{"size":86,"mtime":1611791956834,"results":"25","hashOfConfig":"22"},{"size":101,"mtime":1615679758438,"results":"26","hashOfConfig":"22"},{"size":652,"mtime":1611798121828,"results":"27","hashOfConfig":"22"},{"size":432,"mtime":1615677976582,"results":"28","hashOfConfig":"22"},{"size":161,"mtime":1611789932350,"results":"29","hashOfConfig":"22"},{"size":7215,"mtime":1615692873682,"results":"30","hashOfConfig":"22"},{"size":7442,"mtime":1615680748300,"results":"31","hashOfConfig":"22"},{"size":600,"mtime":1615681210817,"results":"32","hashOfConfig":"22"},{"size":763,"mtime":1615679166176,"results":"33","hashOfConfig":"22"},{"size":211,"mtime":1615678970936,"results":"34","hashOfConfig":"22"},{"size":306,"mtime":1615681117081,"results":"35","hashOfConfig":"22"},{"size":419,"mtime":1615693661257,"results":"36","hashOfConfig":"22"},{"size":2624,"mtime":1615694013264,"results":"37","hashOfConfig":"22"},{"size":13689,"mtime":1615694426850,"results":"38","hashOfConfig":"22"},{"size":13773,"mtime":1615693531792,"results":"39","hashOfConfig":"22"},{"size":13809,"mtime":1615693969305,"results":"40","hashOfConfig":"22"},{"size":2603,"mtime":1615681341737,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"9ec68k",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jose/Documentos/trab-bd/src/index.js",[],["86","87"],"/home/jose/Documentos/trab-bd/src/App.js",[],"/home/jose/Documentos/trab-bd/src/Home/index.js",[],"/home/jose/Documentos/trab-bd/src/utils/axios.js",[],"/home/jose/Documentos/trab-bd/src/mock/index.js",[],"/home/jose/Documentos/trab-bd/src/mock/funcionariosMock.js",[],"/home/jose/Documentos/trab-bd/src/mock/serviçosMock.js",[],"/home/jose/Documentos/trab-bd/src/utils/mock.js",[],"/home/jose/Documentos/trab-bd/src/Home/Services/Cadastro/CadastrarServiço.js",["88","89"],"import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Box, Button, FormHelperText, Grid, makeStyles, TextField } from '@material-ui/core'\nimport * as Yup from 'yup';\nimport { Formik } from 'formik';\nimport { cadastrarServiço } from '../../../actions/servicesActions';\nconst UseStyles = makeStyles({\n\n})\nexport default function CadastrarServiço() {\n    const classes = UseStyles();\n    // const dispatch = useDispatch();\n    return (\n        <Grid >\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mt={8}>\n                <Formik\n                    initialValues={{\n                        modelo: '',\n                        defeito: '',\n                        // work: '',\n                        cpf: '',\n                        // password: '',\n                    }}\n                    validationSchema={Yup.object().shape({\n                        modelo: Yup.string().max(255)\n                            .min(4, 'O modelo precisa ter ao menos 4 caracteres.')\n                            .required('Favor informar o modelo.'),\n                        defeito: Yup.string().max(255)\n                            .required('Favor informar um defeito. '),\n                        cpf: Yup.string()\n                            .max(255)\n                            .required('Favor informar o cpf de um cliente'),\n                    })}\n                    onSubmit={async (\n                        values,\n                        { setErrors, setStatus, setSubmitting },\n                    ) => {\n                        try {\n                            // await dispatch(cadastrarServiço(values.modelo, values.defeito, values.work, values.cpf, values.password));\n                            // navigate('/');\n                        } catch (error) {\n                            const message =\n                                (error.response && error.response.data.message) ||\n                                'Alguma coisa aconteceu';\n                            setStatus({ success: false });\n                            setErrors({ submit: message });\n                            setSubmitting(false);\n                        }\n                    }}\n                >\n                    {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\n                        <form noValidate className={classes.form} onSubmit={handleSubmit}>\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"modelo\"\n                                label=\"Modelo\"\n                                name=\"modelo\"\n                                autoComplete=\"modelo\"\n                                autoFocus\n                                error={Boolean(errors.modelo)}\n                                value={values.modelo}\n                                onChange={handleChange}\n                                helperText={errors.modelo}\n                            />\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"defeito\"\n                                label=\"Defeito\"\n                                name=\"defeito\"\n                                autoComplete=\"defeito\"\n                                autoFocus\n                                error={Boolean(errors.defeito)}\n                                value={values.defeito}\n                                onChange={handleChange}\n                                helperText={errors.defeito}\n                            />\n                            {/* <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"work\"\n                                label=\"Data de Entrada\"\n                                name=\"work\"\n                                autoComplete=\"work\"\n                                autoFocus\n                                error={Boolean(errors.work)}\n                                value={values.work}\n                                onChange={handleChange}\n                                helperText={errors.work}\n                            /> */}\n                            <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"cpf\"\n                                label=\"Cliente (CPF)\"\n                                name=\"cpf\"\n                                autoComplete=\"cpf\"\n                                autoFocus\n                                error={Boolean(errors.cpf)}\n                                value={values.cpf}\n                                onChange={handleChange}\n                                helperText={errors.cpf}\n                            />\n                            {/* <TextField\n                                variant=\"outlined\"\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Senha\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"current-password\"\n                                value={values.password}\n                                onChange={handleChange}\n                                error={Boolean(errors.password)}\n                                helperText={errors.password}\n                            /> */}\n                            <Button\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                                type=\"submit\"\n                                disbled={isSubmitting}\n                            >\n                                Cadastrar Equipamento\n                </Button>\n                            {errors.submit && (\n                                <FormHelperText error>{errors.submit}</FormHelperText>\n                            )}\n                            {/* <Grid container>\n                                <Grid item>\n                                    <Link>Esqueceu sua senha?</Link>\n                                </Grid>\n                                <Grid item>\n                                    <Link>Não tem uma conta? Registre-se</Link>\n                                </Grid>\n                            </Grid> */}\n                        </form>\n                    )}\n                </Formik>\n                {/* <Copyright /> */}\n            </Box>\n        </Grid>\n    )\n}","/home/jose/Documentos/trab-bd/src/Home/Services/Cadastro/CadastrarFuncionário.js",[],"/home/jose/Documentos/trab-bd/src/actions/servicesActions.js",[],"/home/jose/Documentos/trab-bd/src/services/AuthServices.js",[],"/home/jose/Documentos/trab-bd/src/store/index.js",[],"/home/jose/Documentos/trab-bd/src/reducers/index.js",[],"/home/jose/Documentos/trab-bd/src/mock/clientesMock.js",[],"/home/jose/Documentos/trab-bd/src/Home/Services/index.js",["90","91","92"],"/home/jose/Documentos/trab-bd/src/Home/Services/Tabelas/Serviços.js",["93","94"],"/home/jose/Documentos/trab-bd/src/Home/Services/Tabelas/Funcionarios.js",["95","96"],"import React, { useState, useCallback, useEffect } from 'react';\nimport axios from '../../../utils/axios'\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport CadastrarFuncionário from '../Cadastro/CadastrarFuncionário';\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport { AddCircleOutline } from '@material-ui/icons';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    { id: 'cpf', numeric: false, disablePadding: true, label: 'CPF' },\n    { id: 'nome', numeric: false, disablePadding: false, label: 'Nome' },\n    { id: 'Salário', numeric: true, disablePadding: false, label: 'Salário (R$)' },\n    { id: 'Jornada', numeric: true, disablePadding: false, label: 'Jornada (hrs)' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const classes = useToolbarStyles();\n    const { numSelected } = props;\n    const [open, setOpen] = useState()\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Funcionários\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Adicionar Funcionário\">\n                    <IconButton aria-label=\"Add\">\n                        <AddCircleOutline onClick={handleClickOpen} />\n                    </IconButton>\n                </Tooltip>\n            )}\n            <Dialog open={open} DialogContent={false} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"customized-dialog-title\">Cadastrar Funcionário</DialogTitle>\n                <CadastrarFuncionário />\n            </Dialog>\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nfunction Funcionarios() {\n    const classes = useStyles();\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('nome');\n    const [selected, setSelected] = useState([]);\n    const [page, setPage] = useState(0);\n    const [dense, setDense] = useState(false);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [rows, setRows] = useState([])\n\n\n    const getRows = useCallback(async () => {\n        await axios.get('/api/funcionarios/')\n            .then(response => {\n                // console.log(\"resposta aqui: \", response)\n                setRows(response.data.funcionarios)\n            }).catch(error => {\n                console.log(error)\n            })\n\n    }, [setRows]\n    )\n\n    useEffect(() => {\n        getRows()\n\n    }, [getRows])\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.cpf);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, cpf) => {\n        const selectedIndex = selected.indexOf(cpf);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, cpf);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={dense ? 'small' : 'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.cpf);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.cpf)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.cpf}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.cpf}\n                                            </TableCell>\n                                            {/* <TableCell align=\"right\">{row.cpf}</TableCell> */}\n                                            <TableCell align=\"left\">{row.nome}</TableCell>\n                                            <TableCell align=\"right\">{row.Salário}</TableCell>\n                                            <TableCell align=\"right\">{row.Jornada}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n            {/* <FormControlLabel\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                label=\"Dense padding\"\n            /> */}\n        </div>\n    );\n}\n\nexport default Funcionarios\n","/home/jose/Documentos/trab-bd/src/Home/Services/Tabelas/Clientes.js",["97","98","99","100"],"import React, { useState, useCallback, useEffect } from 'react';\nimport axios from '../../../utils/axios'\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport { AddCircleOutline } from '@material-ui/icons';\nimport { Dialog, DialogContent, DialogTitle } from '@material-ui/core';\nimport CadastrarServiço from '../Cadastro/CadastrarServiço';\n\n\nfunction descendingComparator(a, b, orderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order, orderBy) {\n    return order === 'desc'\n        ? (a, b) => descendingComparator(a, b, orderBy)\n        : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n    // { id: 'cpf', numeric: false, disablePadding: true, label: 'CPF' },\n    { id: 'nome', numeric: false, disablePadding: false, label: 'Nome' },\n    { id: 'celular', numeric: false, disablePadding: false, label: 'Celular' },\n    { id: 'endereço', numeric: false, disablePadding: false, label: 'Endereço' },\n];\n\nfunction EnhancedTableHead(props) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property) => (event) => {\n        onRequestSort(event, property);\n    };\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'select all desserts' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            {headCell.label}\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n    root: {\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n    },\n    highlight:\n        theme.palette.type === 'light'\n            ? {\n                color: theme.palette.secondary.main,\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n            }\n            : {\n                color: theme.palette.text.primary,\n                backgroundColor: theme.palette.secondary.dark,\n            },\n    title: {\n        flex: '1 1 100%',\n    },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n    const { numSelected } = props;\n    const classes = useToolbarStyles();\n    const [open, setOpen] = useState(0)\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: numSelected > 0,\n            })}\n        >\n            {numSelected > 0 ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Clientes\n                </Typography>\n            )}\n\n            {numSelected > 0 ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\">\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <Tooltip title=\"Adicionar cliente\">\n                    <IconButton aria-label=\"Add\">\n                        {/* <FilterListIcon /> */}\n                        <AddCircleOutline onClick={handleClickOpen} />\n                    </IconButton>\n                </Tooltip>\n            )}\n            <Dialog open={open} DialogContent={false} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"customized-dialog-title\">Cadastrar cliente</DialogTitle>\n                {/* <CadastrarServiço /> */}\n            </Dialog>\n        </Toolbar>\n    );\n};\n\nEnhancedTableToolbar.propTypes = {\n    numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    paper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        minWidth: 750,\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nfunction Clientes() {\n    const classes = useStyles();\n    const [order, setOrder] = useState('asc');\n    const [orderBy, setOrderBy] = useState('nome');\n    const [selected, setSelected] = useState([]);\n    const [page, setPage] = useState(0);\n    const [dense, setDense] = useState(false);\n    const [rowsPerPage, setRowsPerPage] = useState(5);\n    const [rows, setRows] = useState([])\n\n\n    const getRows = useCallback(async () => {\n        await axios.get('/api/clientes/')\n            .then(response => {\n                // console.log(\"resposta aqui: \", response)\n                setRows(response.data.clientes)\n            }).catch(error => {\n                console.log(error)\n            })\n\n    }, [setRows]\n    )\n\n    useEffect(() => {\n        getRows()\n\n    }, [getRows])\n\n    const handleRequestSort = (event, property) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.cpf);\n            setSelected(newSelecteds);\n            return;\n        }\n        setSelected([]);\n    };\n\n    const handleClick = (event, cpf) => {\n        const selectedIndex = selected.indexOf(cpf);\n        let newSelected = [];\n\n        if (selectedIndex === -1) {\n            newSelected = newSelected.concat(selected, cpf);\n        } else if (selectedIndex === 0) {\n            newSelected = newSelected.concat(selected.slice(1));\n        } else if (selectedIndex === selected.length - 1) {\n            newSelected = newSelected.concat(selected.slice(0, -1));\n        } else if (selectedIndex > 0) {\n            newSelected = newSelected.concat(\n                selected.slice(0, selectedIndex),\n                selected.slice(selectedIndex + 1),\n            );\n        }\n\n        setSelected(newSelected);\n    };\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const handleChangeDense = (event) => {\n        setDense(event.target.checked);\n    };\n\n    const isSelected = (name) => selected.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    return (\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <EnhancedTableToolbar numSelected={selected.length} />\n                <TableContainer>\n                    <Table\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size={dense ? 'small' : 'medium'}\n                        aria-label=\"enhanced table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={selected.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {stableSort(rows, getComparator(order, orderBy))\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row, index) => {\n                                    const isItemSelected = isSelected(row.cpf);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event) => handleClick(event, row.cpf)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.cpf}\n                                            selected={isItemSelected}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                />\n                                            </TableCell>\n                                            {/* <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.cpf}\n                                            </TableCell> */}\n                                            {/* <TableCell align=\"right\">{row.cpf}</TableCell> */}\n                                            <TableCell align=\"left\">{row.nome}</TableCell>\n                                            <TableCell align=\"left\">{row.celular}</TableCell>\n                                            <TableCell align=\"right\">{row.endereço}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            {emptyRows > 0 && (\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\n                                    <TableCell colSpan={6} />\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    rowsPerPageOptions={[5, 10, 25]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n            {/* <FormControlLabel\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\n                label=\"Dense padding\"\n            /> */}\n        </div>\n    );\n}\n\nexport default Clientes\n","/home/jose/Documentos/trab-bd/src/Home/Header/index.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":21},{"ruleId":"105","severity":1,"message":"109","line":6,"column":10,"nodeType":"107","messageId":"108","endLine":6,"endColumn":26},{"ruleId":"105","severity":1,"message":"110","line":5,"column":8,"nodeType":"107","messageId":"108","endLine":5,"endColumn":24},{"ruleId":"105","severity":1,"message":"111","line":6,"column":8,"nodeType":"107","messageId":"108","endLine":6,"endColumn":28},{"ruleId":"105","severity":1,"message":"112","line":7,"column":10,"nodeType":"107","messageId":"108","endLine":7,"endColumn":21},{"ruleId":"105","severity":1,"message":"113","line":21,"column":8,"nodeType":"107","messageId":"108","endLine":21,"endColumn":22},{"ruleId":"105","severity":1,"message":"114","line":214,"column":19,"nodeType":"107","messageId":"108","endLine":214,"endColumn":27},{"ruleId":"105","severity":1,"message":"113","line":21,"column":8,"nodeType":"107","messageId":"108","endLine":21,"endColumn":22},{"ruleId":"105","severity":1,"message":"115","line":280,"column":11,"nodeType":"107","messageId":"108","endLine":280,"endColumn":28},{"ruleId":"105","severity":1,"message":"113","line":21,"column":8,"nodeType":"107","messageId":"108","endLine":21,"endColumn":22},{"ruleId":"105","severity":1,"message":"116","line":23,"column":18,"nodeType":"107","messageId":"108","endLine":23,"endColumn":31},{"ruleId":"105","severity":1,"message":"110","line":24,"column":8,"nodeType":"107","messageId":"108","endLine":24,"endColumn":24},{"ruleId":"105","severity":1,"message":"115","line":282,"column":11,"nodeType":"107","messageId":"108","endLine":282,"endColumn":28},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'cadastrarServiço' is defined but never used.","'CadastrarServiço' is defined but never used.","'CadastrarFuncionário' is defined but never used.","'useSelector' is defined but never used.","'FilterListIcon' is defined but never used.","'setDense' is assigned a value but never used.","'handleChangeDense' is assigned a value but never used.","'DialogContent' is defined but never used.","no-global-assign","no-unsafe-negation"]