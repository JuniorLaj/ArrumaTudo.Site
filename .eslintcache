[{"E:\\LojaManutencao.Site\\src\\index.js":"1","E:\\LojaManutencao.Site\\src\\App.js":"2","E:\\LojaManutencao.Site\\src\\mock\\index.js":"3","E:\\LojaManutencao.Site\\src\\store\\index.js":"4","E:\\LojaManutencao.Site\\src\\mock\\clientesMock.js":"5","E:\\LojaManutencao.Site\\src\\mock\\serviçosMock.js":"6","E:\\LojaManutencao.Site\\src\\mock\\funcionariosMock.js":"7","E:\\LojaManutencao.Site\\src\\reducers\\index.js":"8","E:\\LojaManutencao.Site\\src\\utils\\mock.js":"9","E:\\LojaManutencao.Site\\src\\reducers\\selectedItemTable.js":"10","E:\\LojaManutencao.Site\\src\\utils\\axios.js":"11","E:\\LojaManutencao.Site\\src\\actions\\servicesActions.js":"12","E:\\LojaManutencao.Site\\src\\services\\AuthServices.js":"13","E:\\LojaManutencao.Site\\src\\utils\\api.js":"14","E:\\LojaManutencao.Site\\src\\pages\\Sign-In\\index.js":"15","E:\\LojaManutencao.Site\\src\\routes\\guestRoute.js":"16","E:\\LojaManutencao.Site\\src\\pages\\Home\\index.js":"17","E:\\LojaManutencao.Site\\src\\pages\\Header\\index.js":"18","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\index.js":"19","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Tabelas\\Funcionarios.js":"20","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Apresentação\\ApresentaEquipamento.js":"21","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Tabelas\\Clientes.js":"22","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Tabelas\\Serviços.js":"23","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Apresentação\\ApresentaFuncionário.js":"24","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Apresentação\\ApresentaCliente.js":"25","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Cadastro\\CadastrarServiço.js":"26","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Cadastro\\CadastrarFuncionário.js":"27","E:\\LojaManutencao.Site\\src\\pages\\Sign-In\\FormFuncionario.js":"28"},{"size":300,"mtime":1616896524391,"results":"29","hashOfConfig":"30"},{"size":598,"mtime":1616905574804,"results":"31","hashOfConfig":"30"},{"size":104,"mtime":1616207408709,"results":"32","hashOfConfig":"30"},{"size":217,"mtime":1616207408711,"results":"33","hashOfConfig":"30"},{"size":435,"mtime":1616207408709,"results":"34","hashOfConfig":"30"},{"size":568,"mtime":1616207408709,"results":"35","hashOfConfig":"30"},{"size":683,"mtime":1616207408709,"results":"36","hashOfConfig":"30"},{"size":253,"mtime":1616207408710,"results":"37","hashOfConfig":"30"},{"size":166,"mtime":1616207408712,"results":"38","hashOfConfig":"30"},{"size":688,"mtime":1616207408710,"results":"39","hashOfConfig":"30"},{"size":91,"mtime":1616890198368,"results":"40","hashOfConfig":"30"},{"size":619,"mtime":1616207408708,"results":"41","hashOfConfig":"30"},{"size":792,"mtime":1616207408711,"results":"42","hashOfConfig":"30"},{"size":137,"mtime":1616890184465,"results":"43","hashOfConfig":"30"},{"size":8575,"mtime":1616905753086,"results":"44","hashOfConfig":"30"},{"size":644,"mtime":1616905610692,"results":"45","hashOfConfig":"30"},{"size":243,"mtime":1616894971499,"results":"46","hashOfConfig":"30"},{"size":2687,"mtime":1616207408703,"results":"47","hashOfConfig":"30"},{"size":2838,"mtime":1616207408707,"results":"48","hashOfConfig":"30"},{"size":14588,"mtime":1616895763440,"results":"49","hashOfConfig":"30"},{"size":660,"mtime":1616207408704,"results":"50","hashOfConfig":"30"},{"size":14530,"mtime":1616900008094,"results":"51","hashOfConfig":"30"},{"size":14359,"mtime":1616895776423,"results":"52","hashOfConfig":"30"},{"size":606,"mtime":1616207408705,"results":"53","hashOfConfig":"30"},{"size":716,"mtime":1616207408704,"results":"54","hashOfConfig":"30"},{"size":7373,"mtime":1616895725702,"results":"55","hashOfConfig":"30"},{"size":7600,"mtime":1616207408705,"results":"56","hashOfConfig":"30"},{"size":4976,"mtime":1616902350080,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1cw9ejd",{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"60"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},"E:\\LojaManutencao.Site\\src\\index.js",[],["120","121"],"E:\\LojaManutencao.Site\\src\\App.js",["122"],"E:\\LojaManutencao.Site\\src\\mock\\index.js",[],"E:\\LojaManutencao.Site\\src\\store\\index.js",[],"E:\\LojaManutencao.Site\\src\\mock\\clientesMock.js",[],"E:\\LojaManutencao.Site\\src\\mock\\serviçosMock.js",[],"E:\\LojaManutencao.Site\\src\\mock\\funcionariosMock.js",[],"E:\\LojaManutencao.Site\\src\\reducers\\index.js",[],"E:\\LojaManutencao.Site\\src\\utils\\mock.js",[],"E:\\LojaManutencao.Site\\src\\reducers\\selectedItemTable.js",[],"E:\\LojaManutencao.Site\\src\\utils\\axios.js",[],"E:\\LojaManutencao.Site\\src\\actions\\servicesActions.js",[],"E:\\LojaManutencao.Site\\src\\services\\AuthServices.js",[],"E:\\LojaManutencao.Site\\src\\utils\\api.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Sign-In\\index.js",["123","124","125","126","127","128","129","130","131","132","133","134"],"E:\\LojaManutencao.Site\\src\\routes\\guestRoute.js",["135"],"E:\\LojaManutencao.Site\\src\\pages\\Home\\index.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Header\\index.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\index.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Tabelas\\Funcionarios.js",["136","137","138"],"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport axios from '../../../../utils/axios'\r\nimport api from '../../../../utils/api'\r\n\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CadastrarFuncionário from '../Cadastro/CadastrarFuncionário';\r\nimport { Dialog, DialogTitle } from '@material-ui/core';\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'cpf', numeric: false, disablePadding: true, label: 'CPF' },\r\n    { id: 'nome', numeric: false, disablePadding: false, label: 'Nome' },\r\n    { id: 'Salário', numeric: true, disablePadding: false, label: 'Salário (R$)' },\r\n    { id: 'Jornada', numeric: true, disablePadding: false, label: 'Jornada (hrs)' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n    const [open, setOpen] = useState()\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Funcionários\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Adicionar Funcionário\">\r\n                    <IconButton aria-label=\"Add\">\r\n                        <AddCircleOutline onClick={handleClickOpen} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n            <Dialog open={open} DialogContent={false} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"customized-dialog-title\">Cadastrar Funcionário</DialogTitle>\r\n                <CadastrarFuncionário />\r\n            </Dialog>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nfunction Funcionarios() {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = useState('asc');\r\n    const [orderBy, setOrderBy] = useState('nome');\r\n    const [selected, setSelected] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [dense, setDense] = useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [rows, setRows] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const getRows = useCallback(async () => {\r\n        await axios.get('/api/funcionarios/')\r\n            .then(response => {\r\n                // console.log(\"resposta aqui: \", response)\r\n                setRows(response.data.funcionarios)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }, [setRows]\r\n    )\r\n\r\n    useEffect(() => {\r\n        getRows()\r\n\r\n    }, [getRows])\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.cpf);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, row) => {\r\n        const selectedIndex = selected.indexOf(row.cpf);\r\n        console.log(\"index selecionado: \", selectedIndex)\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, row.cpf);\r\n            dispatch({ type: 'selecionarFunc', payload: row })\r\n\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n            dispatch({ type: 'selecionarFunc', payload: 0 })\r\n\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n            dispatch({ type: 'selecionarFunc', payload: 0 })\r\n\r\n        } else if (selectedIndex > 0) {\r\n            dispatch({ type: 'selecionarFunc', payload: 0 })\r\n\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.cpf);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.cpf}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.cpf}\r\n                                            </TableCell>\r\n                                            {/* <TableCell align=\"right\">{row.cpf}</TableCell> */}\r\n                                            <TableCell align=\"left\">{row.nome}</TableCell>\r\n                                            <TableCell align=\"right\">{row.Salário}</TableCell>\r\n                                            <TableCell align=\"right\">{row.Jornada}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            {/* <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Funcionarios\r\n","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Apresentação\\ApresentaEquipamento.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Tabelas\\Clientes.js",["139","140","141","142"],"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from '../../../../utils/axios'\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport { Dialog, DialogContent, DialogTitle } from '@material-ui/core';\r\nimport CadastrarServiço from '../Cadastro/CadastrarServiço';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    // { id: 'cpf', numeric: false, disablePadding: true, label: 'CPF' },\r\n    { id: 'nome', numeric: false, disablePadding: false, label: 'Nome' },\r\n    { id: 'celular', numeric: false, disablePadding: false, label: 'Celular' },\r\n    { id: 'endereço', numeric: false, disablePadding: false, label: 'Endereço' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const { numSelected } = props;\r\n    const classes = useToolbarStyles();\r\n    const [open, setOpen] = useState(0)\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Clientes\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Adicionar cliente\">\r\n                    <IconButton aria-label=\"Add\">\r\n                        {/* <FilterListIcon /> */}\r\n                        <AddCircleOutline onClick={handleClickOpen} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n            <Dialog open={open} DialogContent={false} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"customized-dialog-title\">Cadastrar cliente</DialogTitle>\r\n                {/* <CadastrarServiço /> */}\r\n            </Dialog>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nfunction Clientes() {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = useState('asc');\r\n    const [orderBy, setOrderBy] = useState('nome');\r\n    const [selected, setSelected] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [dense, setDense] = useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [rows, setRows] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n    const getRows = useCallback(async () => {\r\n        await axios.get('/api/clientes/')\r\n            .then(response => {\r\n                // console.log(\"resposta aqui: \", response)\r\n                setRows(response.data.clientes)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }, [setRows]\r\n    )\r\n\r\n    useEffect(() => {\r\n        getRows()\r\n\r\n    }, [getRows])\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.cpf);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, row) => {\r\n        const selectedIndex = selected.indexOf(row.cpf);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, row.cpf);\r\n            dispatch({ type: 'selecionarCliente', payload: row })\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n            dispatch({ type: 'selecionarCliente', payload: 0 })\r\n\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n            dispatch({ type: 'selecionarCliente', payload: 0 })\r\n\r\n        } else if (selectedIndex > 0) {\r\n            dispatch({ type: 'selecionarCliente', payload: 0 })\r\n\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeDense = (event) => {\r\n        setDense(event.target.checked);\r\n    };\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.cpf);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.cpf}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            {/* <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.cpf}\r\n                                            </TableCell> */}\r\n                                            {/* <TableCell align=\"right\">{row.cpf}</TableCell> */}\r\n                                            <TableCell align=\"left\">{row.nome}</TableCell>\r\n                                            <TableCell align=\"left\">{row.celular}</TableCell>\r\n                                            <TableCell align=\"right\">{row.endereço}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            {/* <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clientes\r\n","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Tabelas\\Serviços.js",["143","144"],"import React, { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from '../../../../utils/axios'\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport { lighten, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { AddCircleOutline } from '@material-ui/icons';\r\nimport { Dialog, DialogTitle } from '@material-ui/core';\r\nimport CadastrarServiço from '../Cadastro/CadastrarServiço';\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'id', numeric: false, disablePadding: true, label: 'Id_equipamento' },\r\n    { id: 'modelo', numeric: false, disablePadding: false, label: 'Modelo' },\r\n    { id: 'defeito', numeric: false, disablePadding: false, label: 'Defeito' },\r\n    { id: 'status', numeric: false, disablePadding: false, label: 'Status' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{ 'aria-label': 'select all desserts' }}\r\n                    />\r\n                </TableCell>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                            {orderBy === headCell.id ? (\r\n                                <span className={classes.visuallyHidden}>\r\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                </span>\r\n                            ) : null}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingLeft: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n        theme.palette.type === 'light'\r\n            ? {\r\n                color: theme.palette.secondary.main,\r\n                backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n            : {\r\n                color: theme.palette.text.primary,\r\n                backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n    title: {\r\n        flex: '1 1 100%',\r\n    },\r\n}));\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n    const classes = useToolbarStyles();\r\n    const { numSelected } = props;\r\n    const [open, setOpen] = useState()\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    return (\r\n        <Toolbar\r\n            className={clsx(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n        >\r\n            {numSelected > 0 ? (\r\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n            ) : (\r\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\r\n                    Serviços\r\n                </Typography>\r\n            )}\r\n\r\n            {numSelected > 0 ? (\r\n                <Tooltip title=\"Delete\">\r\n                    <IconButton aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            ) : (\r\n                <Tooltip title=\"Adicionar Equipamento\">\r\n                    <IconButton aria-label=\"Add\">\r\n                        <AddCircleOutline onClick={handleClickOpen} />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            )}\r\n            <Dialog open={open} DialogContent={false} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"customized-dialog-title\">Adicionar Equipamento</DialogTitle>\r\n                <CadastrarServiço />\r\n            </Dialog>\r\n        </Toolbar>\r\n    );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    table: {\r\n        minWidth: 750,\r\n    },\r\n    visuallyHidden: {\r\n        border: 0,\r\n        clip: 'rect(0 0 0 0)',\r\n        height: 1,\r\n        margin: -1,\r\n        overflow: 'hidden',\r\n        padding: 0,\r\n        position: 'absolute',\r\n        top: 20,\r\n        width: 1,\r\n    },\r\n}));\r\n\r\nfunction Serviços() {\r\n    const classes = useStyles();\r\n    const [order, setOrder] = useState('asc');\r\n    const [orderBy, setOrderBy] = useState('modelo');\r\n    const [selected, setSelected] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [dense, setDense] = useState(false);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n    const [rows, setRows] = useState([])\r\n    const dispatch = useDispatch()\r\n\r\n\r\n\r\n    const getRows = useCallback(async () => {\r\n        await axios.get('/api/serviços/')\r\n            .then(response => {\r\n                // console.log(\"resposta aqui serviços: \", response)\r\n                setRows(response.data.serviços)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            })\r\n\r\n    }, [setRows]\r\n    )\r\n\r\n    useEffect(() => {\r\n        getRows()\r\n\r\n    }, [getRows])\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelecteds = rows.map((n) => n.id);\r\n            setSelected(newSelecteds);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, row) => {\r\n        const selectedIndex = selected.indexOf(row.id);\r\n        let newSelected = [];\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, row.id);\r\n            if (selected.length == 0) {\r\n                dispatch({ type: 'selecionarEquip', payload: row })\r\n            }\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n            dispatch({ type: 'selecionarEquip', payload: 0 })\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n            dispatch({ type: 'selecionarEquip', payload: 0 })\r\n        } else if (selectedIndex > 0) {\r\n            dispatch({ type: 'selecionarEquip', payload: 0 })\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper className={classes.paper}>\r\n                <EnhancedTableToolbar numSelected={selected.length} />\r\n                <TableContainer>\r\n                    <Table\r\n                        className={classes.table}\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size={dense ? 'small' : 'medium'}\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            classes={classes}\r\n                            numSelected={selected.length}\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onSelectAllClick={handleSelectAllClick}\r\n                            onRequestSort={handleRequestSort}\r\n                            rowCount={rows.length}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const isItemSelected = isSelected(row.id);\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            onClick={(event) => handleClick(event, row)}\r\n                                            role=\"checkbox\"\r\n                                            aria-checked={isItemSelected}\r\n                                            tabIndex={-1}\r\n                                            key={row.id}\r\n                                            selected={isItemSelected}\r\n                                        >\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                    inputProps={{ 'aria-labelledby': labelId }}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\r\n                                                {row.id}\r\n                                            </TableCell>\r\n                                            {/* <TableCell align=\"right\">{row.id}</TableCell> */}\r\n                                            <TableCell align=\"left\">{row.modelo}</TableCell>\r\n                                            <TableCell align=\"left\">{row.defeito}</TableCell>\r\n                                            <TableCell align=\"left\">{row.status}</TableCell>\r\n\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                            {emptyRows > 0 && (\r\n                                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                                    <TableCell colSpan={6} />\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n            {/* <FormControlLabel\r\n                control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n                label=\"Dense padding\"\r\n            /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Serviços\r\n","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Apresentação\\ApresentaFuncionário.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Apresentação\\ApresentaCliente.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Cadastro\\CadastrarServiço.js",["145","146"],"import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Box, Button, FormHelperText, Grid, makeStyles, TextField } from '@material-ui/core'\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport { cadastrarServiço } from '../../../../actions/servicesActions';\r\nconst UseStyles = makeStyles({\r\n\r\n})\r\nexport default function CadastrarServiço() {\r\n    const classes = UseStyles();\r\n    // const dispatch = useDispatch();\r\n    return (\r\n        <Grid >\r\n            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mt={8}>\r\n                <Formik\r\n                    initialValues={{\r\n                        modelo: '',\r\n                        defeito: '',\r\n                        // work: '',\r\n                        cpf: '',\r\n                        // password: '',\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                        modelo: Yup.string().max(255)\r\n                            .min(4, 'O modelo precisa ter ao menos 4 caracteres.')\r\n                            .required('Favor informar o modelo.'),\r\n                        defeito: Yup.string().max(255)\r\n                            .required('Favor informar um defeito. '),\r\n                        cpf: Yup.string()\r\n                            .max(255)\r\n                            .required('Favor informar o cpf de um cliente'),\r\n                    })}\r\n                    onSubmit={async (\r\n                        values,\r\n                        { setErrors, setStatus, setSubmitting },\r\n                    ) => {\r\n                        try {\r\n                            // await dispatch(cadastrarServiço(values.modelo, values.defeito, values.work, values.cpf, values.password));\r\n                            // navigate('/');\r\n                        } catch (error) {\r\n                            const message =\r\n                                (error.response && error.response.data.message) ||\r\n                                'Alguma coisa aconteceu';\r\n                            setStatus({ success: false });\r\n                            setErrors({ submit: message });\r\n                            setSubmitting(false);\r\n                        }\r\n                    }}\r\n                >\r\n                    {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\r\n                        <form noValidate className={classes.form} onSubmit={handleSubmit}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"modelo\"\r\n                                label=\"Modelo\"\r\n                                name=\"modelo\"\r\n                                autoComplete=\"modelo\"\r\n                                autoFocus\r\n                                error={Boolean(errors.modelo)}\r\n                                value={values.modelo}\r\n                                onChange={handleChange}\r\n                                helperText={errors.modelo}\r\n                            />\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"defeito\"\r\n                                label=\"Defeito\"\r\n                                name=\"defeito\"\r\n                                autoComplete=\"defeito\"\r\n                                autoFocus\r\n                                error={Boolean(errors.defeito)}\r\n                                value={values.defeito}\r\n                                onChange={handleChange}\r\n                                helperText={errors.defeito}\r\n                            />\r\n                            {/* <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"work\"\r\n                                label=\"Data de Entrada\"\r\n                                name=\"work\"\r\n                                autoComplete=\"work\"\r\n                                autoFocus\r\n                                error={Boolean(errors.work)}\r\n                                value={values.work}\r\n                                onChange={handleChange}\r\n                                helperText={errors.work}\r\n                            /> */}\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"cpf\"\r\n                                label=\"Cliente (CPF)\"\r\n                                name=\"cpf\"\r\n                                autoComplete=\"cpf\"\r\n                                autoFocus\r\n                                error={Boolean(errors.cpf)}\r\n                                value={values.cpf}\r\n                                onChange={handleChange}\r\n                                helperText={errors.cpf}\r\n                            />\r\n                            {/* <TextField\r\n                                variant=\"outlined\"\r\n                                margin=\"normal\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"password\"\r\n                                label=\"Senha\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                error={Boolean(errors.password)}\r\n                                helperText={errors.password}\r\n                            /> */}\r\n                            <Button\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.button}\r\n                                type=\"submit\"\r\n                                disbled={isSubmitting}\r\n                            >\r\n                                Cadastrar Equipamento\r\n                </Button>\r\n                            {errors.submit && (\r\n                                <FormHelperText error>{errors.submit}</FormHelperText>\r\n                            )}\r\n                            {/* <Grid container>\r\n                                <Grid item>\r\n                                    <Link>Esqueceu sua senha?</Link>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Link>Não tem uma conta? Registre-se</Link>\r\n                                </Grid>\r\n                            </Grid> */}\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n                {/* <Copyright /> */}\r\n            </Box>\r\n        </Grid>\r\n    )\r\n}","E:\\LojaManutencao.Site\\src\\pages\\Home\\Services\\Cadastro\\CadastrarFuncionário.js",[],"E:\\LojaManutencao.Site\\src\\pages\\Sign-In\\FormFuncionario.js",["147","148","149","150","151","152","153"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Link from '@material-ui/core/Link';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport { useNavigate } from 'react-router';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    form: {\r\n        margin: theme.spacing(2, 4),\r\n    },\r\n    loginFunc: {\r\n        right: '0'\r\n    }\r\n}));\r\n\r\nexport default function FormFuncionario(){\r\n    const classes = useStyles();\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <Box item md={5}>\r\n        <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mt={4}>\r\n            <Typography variant=\"h5\">Acesso Funcionário</Typography>\r\n            <Formik\r\n                initialValues={{\r\n                    email: '',\r\n                    password: '',\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    email: Yup.string()\r\n                        .email('Favor informar um email válido. ')\r\n                        .max(255)\r\n                        .required('Favor informar o email'),\r\n                    password: Yup.string()\r\n                        .max(255).min(7, 'O password precisa ter ao menos 7 caractéres. ')\r\n                        .required('Favor informar o password. '),\r\n                })}\r\n                onSubmit={async (\r\n                    values,\r\n                    { setErrors, setStatus, setSubmitting },\r\n                ) => {\r\n                    try {\r\n                        // await dispatch(signIn(values.email, values.password));\r\n                        navigate('/');\r\n                    } catch (error) {\r\n                        const message =\r\n                            (error.response && error.response.data.message) ||\r\n                            'Alguma coisa aconteceu';\r\n\r\n                        setStatus({ success: false });\r\n                        setErrors({ submit: message });\r\n                        setSubmitting(false);\r\n                    }\r\n                }}\r\n            >\r\n                {({ errors, handleChange, handleSubmit, isSubmitting, values }) => (\r\n                    <form noValidate className={classes.form} onSubmit={handleSubmit}>\r\n                        <TextField\r\n                            variant=\"standard\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"E-mail\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                            error={Boolean(errors.email)}\r\n                            value={values.email}\r\n                            onChange={handleChange}\r\n                            helperText={errors.email}\r\n                        />\r\n                        <TextField\r\n                            variant=\"standard\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Senha\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={values.password}\r\n                            onChange={handleChange}\r\n                            error={Boolean(errors.password)}\r\n                            helperText={errors.password}\r\n                        />\r\n                        <Button\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            type=\"submit\"\r\n                            disbled={isSubmitting}\r\n                        >\r\n                            Entrar\r\n                        </Button>\r\n                        {errors.submit && (\r\n                            <FormHelperText error>{errors.submit}</FormHelperText>\r\n                        )}\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </Box>\r\n        </Box>\r\n    )\r\n}",{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":2,"column":33,"nodeType":"160","messageId":"161","endLine":2,"endColumn":38},{"ruleId":"158","severity":1,"message":"162","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":12},{"ruleId":"158","severity":1,"message":"163","line":7,"column":8,"nodeType":"160","messageId":"161","endLine":7,"endColumn":24},{"ruleId":"158","severity":1,"message":"164","line":10,"column":8,"nodeType":"160","messageId":"161","endLine":10,"endColumn":12},{"ruleId":"158","severity":1,"message":"165","line":22,"column":10,"nodeType":"160","messageId":"161","endLine":22,"endColumn":14},{"ruleId":"158","severity":1,"message":"166","line":64,"column":11,"nodeType":"160","messageId":"161","endLine":64,"endColumn":19},{"ruleId":"158","severity":1,"message":"167","line":65,"column":11,"nodeType":"160","messageId":"161","endLine":65,"endColumn":19},{"ruleId":"168","severity":1,"message":"169","line":111,"column":17,"nodeType":"170","endLine":111,"endColumn":41},{"ruleId":"168","severity":1,"message":"169","line":112,"column":17,"nodeType":"170","endLine":112,"endColumn":41},{"ruleId":"168","severity":1,"message":"169","line":113,"column":17,"nodeType":"170","endLine":113,"endColumn":41},{"ruleId":"168","severity":1,"message":"169","line":114,"column":17,"nodeType":"170","endLine":114,"endColumn":41},{"ruleId":"168","severity":1,"message":"169","line":115,"column":17,"nodeType":"170","endLine":115,"endColumn":41},{"ruleId":"168","severity":1,"message":"169","line":116,"column":17,"nodeType":"170","endLine":116,"endColumn":41},{"ruleId":"158","severity":1,"message":"171","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":21},{"ruleId":"158","severity":1,"message":"172","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":11},{"ruleId":"158","severity":1,"message":"173","line":25,"column":8,"nodeType":"160","messageId":"161","endLine":25,"endColumn":22},{"ruleId":"158","severity":1,"message":"174","line":294,"column":11,"nodeType":"160","messageId":"161","endLine":294,"endColumn":28},{"ruleId":"158","severity":1,"message":"173","line":22,"column":8,"nodeType":"160","messageId":"161","endLine":22,"endColumn":22},{"ruleId":"158","severity":1,"message":"175","line":24,"column":18,"nodeType":"160","messageId":"161","endLine":24,"endColumn":31},{"ruleId":"158","severity":1,"message":"176","line":25,"column":8,"nodeType":"160","messageId":"161","endLine":25,"endColumn":24},{"ruleId":"158","severity":1,"message":"174","line":290,"column":11,"nodeType":"160","messageId":"161","endLine":290,"endColumn":28},{"ruleId":"158","severity":1,"message":"177","line":214,"column":19,"nodeType":"160","messageId":"161","endLine":214,"endColumn":27},{"ruleId":"178","severity":1,"message":"179","line":258,"column":33,"nodeType":"180","messageId":"181","endLine":258,"endColumn":35},{"ruleId":"158","severity":1,"message":"182","line":2,"column":10,"nodeType":"160","messageId":"161","endLine":2,"endColumn":21},{"ruleId":"158","severity":1,"message":"183","line":6,"column":10,"nodeType":"160","messageId":"161","endLine":6,"endColumn":26},{"ruleId":"158","severity":1,"message":"162","line":2,"column":8,"nodeType":"160","messageId":"161","endLine":2,"endColumn":12},{"ruleId":"158","severity":1,"message":"184","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":14},{"ruleId":"158","severity":1,"message":"163","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":24},{"ruleId":"158","severity":1,"message":"164","line":8,"column":8,"nodeType":"160","messageId":"161","endLine":8,"endColumn":12},{"ruleId":"158","severity":1,"message":"185","line":16,"column":8,"nodeType":"160","messageId":"161","endLine":16,"endColumn":22},{"ruleId":"158","severity":1,"message":"186","line":17,"column":8,"nodeType":"160","messageId":"161","endLine":17,"endColumn":21},{"ruleId":"158","severity":1,"message":"167","line":34,"column":11,"nodeType":"160","messageId":"161","endLine":34,"endColumn":19},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Grid' is defined but never used.","'LockOutlinedIcon' is defined but never used.","'Link' is defined but never used.","'List' is defined but never used.","'navigate' is assigned a value but never used.","'dispatch' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useSelector' is defined but never used.","'api' is defined but never used.","'FilterListIcon' is defined but never used.","'handleChangeDense' is assigned a value but never used.","'DialogContent' is defined but never used.","'CadastrarServiço' is defined but never used.","'setDense' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useDispatch' is defined but never used.","'cadastrarServiço' is defined but never used.","'Avatar' is defined but never used.","'InputAdornment' is defined but never used.","'AccountCircle' is defined but never used.","no-global-assign","no-unsafe-negation"]